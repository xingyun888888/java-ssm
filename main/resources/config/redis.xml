<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:p="http://www.springframework.org/schema/p"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

   <!-- redis config start -->
   <!-- 配置JedisPoolConfig实例 -->
   <!-- redis数据源 -->

   <bean class="redis.clients.jedis.JedisPool" id="jedisPool">
      <constructor-arg index="0" ref="poolConfig"></constructor-arg>
      <constructor-arg index="1" value="${redis.host}" type="java.lang.String"></constructor-arg>
      <constructor-arg index="2" value="${redis.port}" type="int"></constructor-arg>
   </bean>



   <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
      <!-- 最大空闲数 -->
      <property name="maxIdle" value="${redis.maxIdle}" />
      <!-- 最大空连接数 -->
      <property name="maxTotal" value="${redis.maxTotal}" />
      <!-- 最大等待时间 -->
      <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
      <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
      <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
      <!-- 返回连接时，检测连接是否成功 -->
      <property name="testOnBorrow" value="${redis.testOnBorrow}" />
   </bean>

   <!-- Spring-redis连接池管理工厂 -->
   <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
      <!-- IP地址 -->
      <property name="hostName" value="${redis.host}" />
      <!-- 端口号 -->
      <property name="port" value="${redis.port}" />
      <!-- 超时时间 默认2000-->
      <property name="timeout" value="${redis.timeout}" />
      <!-- 连接池配置引用 -->
      <property name="poolConfig" ref="poolConfig" />
      <!-- usePool：是否使用连接池 -->
      <property name="usePool" value="true"/>
   </bean>

   <!-- redis template definition -->
   <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
      <property name="connectionFactory" ref="jedisConnectionFactory" />
      <property name="keySerializer">
         <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
      </property>
      <property name="valueSerializer">
         <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
      </property>
      <property name="hashKeySerializer">
         <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
      </property>
      <property name="hashValueSerializer">
         <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
      </property>
      <!--开启事务  -->
      <property name="enableTransactionSupport" value="true"></property>
   </bean>

   <!--自定义redis工具类,在需要缓存的地方注入此类  -->
   <bean id="redisCacheManager" class="com.gaochao.redis.RedisCacheManager">
      <property name="redisTemplate" ref="redisTemplate" />
   </bean>
   <!-- redis config end -->
</beans>